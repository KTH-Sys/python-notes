{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8642ef41-2d2d-4b05-a93f-60a1610f4cf3",
   "metadata": {},
   "source": [
    "# Functions\n",
    "A function is a reusable block of code that performs a specific task."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cecfddd5-96c3-4c9a-b547-e47cc718f627",
   "metadata": {},
   "outputs": [],
   "source": [
    "def function_name(parameters):\n",
    "    \"\"\"\n",
    "    (optional) Docstring explaining the function\n",
    "    \"\"\"\n",
    "    # Code block (function body)\n",
    "    return value  # (optional)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58ac8d53-61a8-4402-9d14-cc11f6bd12c3",
   "metadata": {},
   "source": [
    "## Example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "35be13ec-0c92-4151-9163-2d36f54e34ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "def greet():\n",
    "    print(\"Hello, World!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "85b96949-07ba-4536-b1dd-e2e4b0ad16e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, World!\n"
     ]
    }
   ],
   "source": [
    "greet ()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fccff291-562a-4855-b446-9cca3105a083",
   "metadata": {},
   "source": [
    "### Function with Parameters & Return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "207a796a-c831-4a88-82f2-958907c094d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7\n"
     ]
    }
   ],
   "source": [
    "def add(a, b):\n",
    "    return a + b\n",
    "\n",
    "result = add(3, 4)  # result is 7\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c3fb6c1c-aa21-43d8-b5f8-36f06ff53d78",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 567\n",
    "def square(x):\n",
    "    \"\"\"Return the square of x.\"\"\"\n",
    "    return x * x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "434828e2-6016-4fdc-8ce6-cfea59ddbd39",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "321489"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "square(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "9bb665ee-7e05-44e5-a0cf-fec6d431ebbc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n",
      "27\n"
     ]
    }
   ],
   "source": [
    "def power(base, exponent=2):\n",
    "    return base ** exponent\n",
    "\n",
    "print(power(3))      # Output: 9 (3^2)\n",
    "print(power(3, 3))   # Output: 27 (3^3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "bcb6d72f-ea1b-4ed6-8ee4-2ced514449ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 3 6\n"
     ]
    }
   ],
   "source": [
    "def stats(numbers):\n",
    "    return min(numbers), max(numbers), sum(numbers)\n",
    "\n",
    "mn, mx, total = stats([1, 2, 3])\n",
    "print(mn, mx, total)  # Output: 1 3 6"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "932eb8c3-bfe5-4ae4-9bce-ec426a207ae6",
   "metadata": {},
   "source": [
    "### Lambda (Anonymous) Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "f19cc384-dc8d-42e9-9985-69cc5a1adfc4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25\n"
     ]
    }
   ],
   "source": [
    "square = lambda x: x * x\n",
    "print(square(5))  # Output: 25"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "b28abe8c-3906-410a-bf9a-84a601492cd9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n"
     ]
    }
   ],
   "source": [
    "add = lambda x, y: x + y\n",
    "print(add(3, 5))   # Output: 8"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff63b5fb-0b40-457c-bec0-3ce17f0df897",
   "metadata": {},
   "source": [
    "equal to"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "dfad8839-8d06-4988-a001-87a253824a0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def add(x, y):\n",
    "    return x + y"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af992fa4-e12e-41dc-b70d-c4786b0a7a2a",
   "metadata": {},
   "source": [
    "## map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "cafa3ff7-8cb9-4b17-b147-e57d8c40c7c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 4, 9, 16]\n"
     ]
    }
   ],
   "source": [
    "nums = [1, 2, 3, 4]\n",
    "squares = list(map(lambda x: x**2, nums))\n",
    "print(squares) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "339dea83-add7-464d-80fa-7cdc1b0711d6",
   "metadata": {},
   "source": [
    "## filter()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "860cead6-6ada-4dec-98fc-1c3ec271329a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 4, 6]\n"
     ]
    }
   ],
   "source": [
    "nums = [1, 2, 3, 4, 5, 6]\n",
    "evens = list(filter(lambda x: x % 2 == 0, nums))\n",
    "print(evens)  # Output: [2, 4, 6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d87ade73-7bce-4bf4-913f-5b447276216d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
